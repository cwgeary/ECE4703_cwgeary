/*************************************************************************
 *  Basic stereo loop code for C6713 DSK and AIC23 codec
 *  D. Richard Brown on 22-Aug-2011
 *  Based on code from "Real-Time Digital Signal Processing Based on TMS320C6000"
 *  by N. Kehtarnavaz and N. Kim.
 *************************************************************************/

#define CHIP_6713 1

#include <stdio.h>
#include <c6x.h>
#include <csl.h>
#include <csl_mcbsp.h>
#include <csl_irq.h>

#include "dsk6713.h"
#include "dsk6713_aic23.h"

#include "lowpass_50.h"
#define ORDER 51

//#include "lowpass_100.h"
//#define ORDER 101

//#include "lowpass_300.h"
//#define ORDER 301

//#include "bandpass_200.h"
//#define ORDER 201

//#include "bandpass_400.h"
//#define ORDER 401

#define FFT_LENGTH 1024

DSK6713_AIC23_CodecHandle hCodec;							// Codec handle
DSK6713_AIC23_Config config = DSK6713_AIC23_DEFAULTCONFIG;  // Codec configuration with default settings

typedef struct {
	float re, im;
} COMPLEX;

//Create storage array for signal components
COMPLEX PING[FFT_LENGTH - (ORDER - 1)] = {0};
COMPLEX PONG[FFT_LENGTH - (ORDER - 1)] = {0};
COMPLEX COEFF[ORDER] = {0};
COMPLEX w[FFT_LENGTH - (ORDER - 1)];
float output[FFT_LENGTH] = {0};

short n = 0;

interrupt void serialPortRcvISR(void);
void cfftr2_dit(COMPLEX*, COMPLEX*, short);
void bitrev(COMPLEX*, short*, int);
void digitrev_index(short*, int, int);

void main()
{

	DSK6713_init();		// Initialize the board support library, must be called first
    hCodec = DSK6713_AIC23_openCodec(0, &config);	// open codec and get handle

	// Configure buffered serial ports for 32 bit operation
	// This allows transfer of both right and left channels in one read/write
	MCBSP_FSETS(SPCR1, RINTM, FRM);
	MCBSP_FSETS(SPCR1, XINTM, FRM);
	MCBSP_FSETS(RCR1, RWDLEN1, 32BIT);
	MCBSP_FSETS(XCR1, XWDLEN1, 32BIT);

	// set codec sampling frequency
	DSK6713_AIC23_setFreq(hCodec, DSK6713_AIC23_FREQ_8KHZ);

	//initialize buffers to zero
	for(n = 0; n < FFT_LENGTH; n++)
	{
		output[i] = 0;
	}

	for(n = 0; n < (FFT_LENGTH - (ORDER - 1)); n++)
	{
		PING[i].re = 0;
		PING[i].im = 0;
		PONG[i].re = 0;
		PONG[i].im = 0;
	}

	for(n = 0; n < ORDER; n++)
	{
		COEFF[i].re = B[i];
		COEFF[i].im = 0;
	}


	// interrupt setup
	IRQ_globalDisable();			// Globally disables interrupts
	IRQ_nmiEnable();				// Enables the NMI interrupt
	IRQ_map(IRQ_EVT_RINT1,15);		// Maps an event to a physical interrupt
	IRQ_enable(IRQ_EVT_RINT1);		// Enables the event
	IRQ_globalEnable();				// Globally enables interrupts

	while(1)						// main loop - do nothing but wait for interrupts
	{
	}
}

interrupt void serialPortRcvISR()
{
	union {Uint32 combo; short channel[2];} temp;

	float out = 0;
	temp.combo = MCBSP_read(DSK6713_AIC23_DATAHANDLE);
	// Note that right channel is in temp.channel[0]
	// Note that left channel is in temp.channel[1]

	//temp.channel[1] = temp.channel[0];

	//create temporary variable of left channel for processing
	float tempF = temp.channel[1];

	//perform scaling => [-1, 1)
	tempF /= 32768;

	//wait for buffer to fill up with samples before filtering
	//buffer is full, now perform filter
	int i,j;
	if(n >= BL)
	{
		n = 0;
	}

	x[n] = tempF;

	//Calculate filter gain
	for(i = 0; i < ORDER; i++){
		j = n - i;
		if(j < 0){
			j += ORDER;
		}
		out += B[i] * x[j];
	}
	n++;

	//rescale and output
	out *= 32768;
	temp.channel[0] = (short)out;

	MCBSP_write(DSK6713_AIC23_DATAHANDLE, temp.combo);
}

