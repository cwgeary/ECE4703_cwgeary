/*************************************************************************
 *  Basic stereo loop code for C6713 DSK and AIC23 codec
 *  D. Richard Brown on 22-Aug-2011
 *  Based on code from "Real-Time Digital Signal Processing Based on TMS320C6000"
 *  by N. Kehtarnavaz and N. Kim.
 *************************************************************************/

#define CHIP_6713 1

#include <stdio.h>
#include <c6x.h>
#include <csl.h>
#include <csl_mcbsp.h>
#include <csl_irq.h>

#include "dsk6713.h"
#include "dsk6713_aic23.h"

#define ORDER 20
#define MU 0.0001

//Create storage array for signal components
float x[ORDER];
float b_adpt[ORDER];
float e;
unsigned int n = 0;

void serialPortRcvISR(void);

void main()
{
	// Configure buffered serial ports for 32 bit operation
	// This allows transfer of both right and left channels in one read/write
	MCBSP_FSETS(SPCR1, RINTM, FRM);
	MCBSP_FSETS(SPCR1, XINTM, FRM);
	MCBSP_FSETS(RCR1, RWDLEN1, 32BIT);
	MCBSP_FSETS(XCR1, XWDLEN1, 32BIT);

	for(n = 0; n < ORDER; n++)
	{
		x[n] = 0;
	}


	while(1)						// main loop - do nothing but wait for interrupts
	{
		serialPortRcvISR();
	}
}

void serialPortRcvISR()
{
	union {Uint32 combo; short channel[2];} temp;

	float d_n = 0, y_n = 0, out = 0, tempD = 0;
	int i = 0, j = 0;

	temp.combo = MCBSP_read(DSK6713_AIC23_DATAHANDLE);
	// Note that right channel is in temp.channel[0]
	// Note that left channel is in temp.channel[1]

	d_n = (float)temp.channel[0]; 	// output of unknown system goes into d_n
	x[n] = (float)temp.channel[1]; // regular noise fed into x[n]

	d_n /= 32768;		// perform scaling to put within range of [-1, 1)
	x[n] /= 32768;		// perform scaling to put within range of [-1, 1)

	//take care of circular buffer indexing
	if(n >= (ORDER - 1))
	{
		n = 0;
	}

	//Perform FIR Filter on noise
	for(i = 0; i < (ORDER); i++){
		j = n - i;
		if(j < 0){
			j += (ORDER);
		}
		y_n += b_adpt[i] * x[j]; 	// accumulate output from filter into y_n
	}

	e = (d_n - y_n); 	// find error between unknown system and filter output

	//perform adaptive algorithm based on that error
	for(i = 0; i < (ORDER); i++)
	{
		j = n - i;
		if(j < 0){
			j += (ORDER);
		}
		tempD = b_adpt[i] - (MU*e*x[j]);
		b_adpt[i] = tempD;
	}

	out = e;
	out *= 32768; 	// upscale error for DSK output
	y_n *= 32768; 	// upscale filter output for DSK output

	temp.channel[0] = (short)out; 	// output error on right channel
	temp.channel[1] = (short)y_n;	// adaptive filter output on left channel

	n++;

	MCBSP_write(DSK6713_AIC23_DATAHANDLE, temp.combo);
}

void init(void)
{
	//initialize all globals and arrays to 0
	unsigned int i;
	for(i = 0; i < (ORDER); i++)
	{
		e = 0.0;
		x[i] = 0.0;
		b_adpt[i] = 0.0;
	}
}

